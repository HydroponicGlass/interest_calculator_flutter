import 'package:flutter/material.dart';
import '../../theme/app_theme.dart';
import '../../widgets/common/custom_card.dart';
import '../../services/onboarding_service.dart';
import '../../services/calculation_history_service.dart';
import '../onboarding/onboarding_screen.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: const Text('ÏÑ§Ï†ï'),
      ),
      body: Container(
        decoration: AppTheme.gradientBackground,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // App Info Section
              _buildSectionHeader('Ïï± Ï†ïÎ≥¥'),
              const SizedBox(height: 12),
              CustomCard(
                child: Column(
                  children: [
                    _buildSettingItem(
                      Icons.info_outline,
                      'Ïï± ÏÜåÍ∞ú Î≥¥Í∏∞',
                      'Ïï±Ïùò Í∏∞Îä•Í≥º ÏÇ¨Ïö©Î≤ïÏùÑ Îã§Ïãú ÌôïÏù∏ÌïòÏÑ∏Ïöî',
                      onTap: _showOnboarding,
                    ),
                    const Divider(height: 1),
                    _buildSettingItem(
                      Icons.star_outline,
                      'Î≤ÑÏ†Ñ Ï†ïÎ≥¥',
                      '1.0.0',
                      showArrow: false,
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 24),
              
              // Data Management Section
              _buildSectionHeader('Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨'),
              const SizedBox(height: 12),
              CustomCard(
                child: Column(
                  children: [
                    _buildSettingItem(
                      Icons.history,
                      'Í≥ÑÏÇ∞ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî',
                      'Ï†ÄÏû•Îêú Í≥ÑÏÇ∞ ÏûÖÎ†•Í∞íÎì§ÏùÑ Î™®Îëê ÏÇ≠Ï†úÌï©ÎãàÎã§',
                      onTap: _showClearHistoryDialog,
                      iconColor: Colors.orange,
                    ),
                    const Divider(height: 1),
                    _buildSettingItem(
                      Icons.refresh,
                      'Ïï± Ï¥àÍ∏∞Ìôî',
                      'Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÍ≥† Ï≤òÏùå ÏÉÅÌÉúÎ°ú ÎêòÎèåÎ¶ΩÎãàÎã§',
                      onTap: _showResetAppDialog,
                      iconColor: Colors.red,
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 24),
              
              // Help Section
              _buildSectionHeader('ÎèÑÏõÄÎßê'),
              const SizedBox(height: 12),
              CustomCard(
                child: Column(
                  children: [
                    _buildSettingItem(
                      Icons.help_outline,
                      'ÏÇ¨Ïö©Î≤ï Í∞ÄÏù¥Îìú',
                      'Í∞Å Í≥ÑÏÇ∞Í∏∞Ïùò ÏÉÅÏÑ∏Ìïú ÏÇ¨Ïö©Î≤ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
                      onTap: _showHelpDialog,
                    ),
                    const Divider(height: 1),
                    _buildSettingItem(
                      Icons.calculate,
                      'Í≥ÑÏÇ∞ Í≥µÏãù',
                      'Ïù¥Ïûê Í≥ÑÏÇ∞Ïóê ÏÇ¨Ïö©ÎêòÎäî Í≥µÏãùÎì§ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
                      onTap: _showFormulaDialog,
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 40),
              
              // Footer
              Center(
                child: Text(
                  'Ïò¨Ïù∏Ïõê Ïù¥Ïûê Í≥ÑÏÇ∞Í∏∞ v1.0.0\\nÎòëÎòëÌïú Í∏àÏúµ Í≥ÑÏÇ∞Ïùò ÏãúÏûë',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white.withValues(alpha: 0.7),
                    fontSize: 12,
                    height: 1.5,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: Colors.white,
      ),
    );
  }

  Widget _buildSettingItem(
    IconData icon,
    String title,
    String subtitle, {
    VoidCallback? onTap,
    Color? iconColor,
    bool showArrow = true,
  }) {
    return ListTile(
      leading: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: (iconColor ?? AppTheme.primaryColor).withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(10),
        ),
        child: Icon(
          icon,
          color: iconColor ?? AppTheme.primaryColor,
          size: 20,
        ),
      ),
      title: Text(
        title,
        style: const TextStyle(
          fontWeight: FontWeight.w600,
        ),
      ),
      subtitle: Text(
        subtitle,
        style: TextStyle(
          color: AppTheme.textSecondary,
          fontSize: 13,
        ),
      ),
      trailing: showArrow
          ? const Icon(
              Icons.arrow_forward_ios,
              size: 16,
              color: AppTheme.textSecondary,
            )
          : null,
      onTap: onTap,
    );
  }

  void _showOnboarding() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => const OnboardingScreen(),
      ),
    );
  }

  void _showClearHistoryDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Í≥ÑÏÇ∞ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî'),
        content: const Text(
          'Ï†ÄÏû•Îêú Î™®Îì† Í≥ÑÏÇ∞ ÏûÖÎ†•Í∞íÎì§Ïù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§.\\nÎã§ÏùåÏóê Í≥ÑÏÇ∞Í∏∞Î•º ÏÇ¨Ïö©Ìï† Îïå Îπà ÌôîÎ©¥ÏúºÎ°ú ÏãúÏûëÎê©ÎãàÎã§.\\n\\nÍ≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () async {
              await CalculationHistoryService.clearAllHistory();
              if (mounted) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Í≥ÑÏÇ∞ Í∏∞Î°ùÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§'),
                  ),
                );
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.orange),
            child: const Text('Ï¥àÍ∏∞Ìôî'),
          ),
        ],
      ),
    );
  }

  void _showResetAppDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ïï± Ï¥àÍ∏∞Ìôî'),
        content: const Text(
          'Îã§Ïùå Ìï≠Î™©Îì§Ïù¥ Î™®Îëê ÏÇ≠Ï†úÎê©ÎãàÎã§:\\n\\n‚Ä¢ Ï†ÄÏû•Îêú Î™®Îì† Í≥ÑÏ¢å\\n‚Ä¢ Í≥ÑÏÇ∞ Í∏∞Î°ù\\n‚Ä¢ Ïï± ÏÑ§Ï†ï\\n\\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.\\nÍ≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () async {
              await CalculationHistoryService.clearAllHistory();
              await OnboardingService.resetOnboarding();
              if (mounted) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Ïï±Ïù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§. Ïï±ÏùÑ Ïû¨ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.'),
                    duration: Duration(seconds: 3),
                  ),
                );
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Ï¥àÍ∏∞Ìôî'),
          ),
        ],
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ÏÇ¨Ïö©Î≤ï Í∞ÄÏù¥Îìú'),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'üí∞ Ïù¥Ïûê Í≥ÑÏÇ∞',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('‚Ä¢ ÏòàÍ∏à: Î™©ÎèàÏùÑ Ìïú Î≤àÏóê Ìà¨ÏûêÌïòÎäî ÏÉÅÌíà'),
              Text('‚Ä¢ Ï†ÅÍ∏à: Îß§Ïõî ÏùºÏ†ï Í∏àÏï°ÏùÑ ÎÇ©ÏûÖÌïòÎäî ÏÉÅÌíà'),
              SizedBox(height: 12),
              Text(
                'üìä ÎπÑÍµê Í∏∞Îä•',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('‚Ä¢ Ïó¨Îü¨ Í∏àÏúµ ÏÉÅÌíàÏùò ÏàòÏùµÎ•† ÎπÑÍµê'),
              Text('‚Ä¢ ÏµúÏ†ÅÏùò Ìà¨Ïûê ÏòµÏÖò ÏÑ†ÌÉù ÎèÑÏõÄ'),
              SizedBox(height: 12),
              Text(
                'üéØ Î™©Ìëú Í≥ÑÏÇ∞',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('‚Ä¢ Î™©Ìëú Í∏àÏï° Îã¨ÏÑ± Í∏∞Í∞Ñ Í≥ÑÏÇ∞'),
              Text('‚Ä¢ Î™©Ìëú Îã¨ÏÑ±ÏùÑ ÏúÑÌïú ÌïÑÏöî Í∏àÏï° Í≥ÑÏÇ∞'),
              SizedBox(height: 12),
              Text(
                'üíæ ÏûêÎèô Ï†ÄÏû•',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('‚Ä¢ ÎßàÏßÄÎßâ Í≥ÑÏÇ∞ Í∞íÎì§Ïù¥ ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•'),
              Text('‚Ä¢ Îã§Ïùå ÏÇ¨Ïö© Ïãú ÏûêÎèôÏúºÎ°ú ÏûÖÎ†•Îê®'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _showFormulaDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Í≥ÑÏÇ∞ Í≥µÏãù'),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'üßÆ Îã®Î¶¨ (Simple Interest)',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('Ïù¥Ïûê = ÏõêÍ∏à √ó Ïù¥ÏûêÏú® √ó Í∏∞Í∞Ñ'),
              SizedBox(height: 12),
              Text(
                'üìà Î≥µÎ¶¨ (Compound Interest)',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('ÏµúÏ¢ÖÍ∏àÏï° = ÏõêÍ∏à √ó (1 + Ïù¥ÏûêÏú®)^Í∏∞Í∞Ñ'),
              SizedBox(height: 12),
              Text(
                'üí∞ Ï†ÅÍ∏à (Monthly Deposit)',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('Í∞Å Ïõî ÎÇ©ÏûÖÍ∏àÏóê ÎåÄÌï¥ ÎÇ®ÏùÄ Í∏∞Í∞ÑÎßåÌÅº Ïù¥Ïûê Ï†ÅÏö©'),
              SizedBox(height: 12),
              Text(
                'üè¶ ÏÑ∏Í∏à (Tax)',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('‚Ä¢ ÏùºÎ∞òÍ≥ºÏÑ∏: 15.4%'),
              Text('‚Ä¢ ÎπÑÍ≥ºÏÑ∏: 0%'),
              Text('‚Ä¢ ÏÇ¨Ïö©Ïûê Ï†ïÏùò: ÏßÅÏ†ë ÏûÖÎ†•'),
              SizedBox(height: 12),
              Text(
                '‚ö° Î≥µÎ¶¨ Ï£ºÍ∏∞',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('‚Ä¢ ÏõîÎ≥µÎ¶¨: Îß§Ïõî Î≥µÎ¶¨ Ï†ÅÏö©'),
              Text('‚Ä¢ ÏùºÎ≥µÎ¶¨: Îß§Ïùº Î≥µÎ¶¨ Ï†ÅÏö©'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }
}